#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Administraci√≥n de Servidor Minecraft Java Edition
Compatible con Windows 10/11 - AMD Ryzen 7 5700, 32GB RAM, RTX 3050
"""

import os
import sys
import json
import requests
import subprocess
import zipfile
import time
import socket
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich import print as rprint

console = Console()

class MinecraftServerInstaller:
    def __init__(self):
        self.server_dir = Path("C:/MinecraftServer")
        self.server_jar = self.server_dir / "server.jar"
        self.java_args = [
            "java", "-Xms4G", "-Xmx8G", "-XX:+UseG1GC", 
            "-XX:+ParallelRefProcEnabled", "-jar", "server.jar", "nogui"
        ]
        
    def create_server_directory(self):
        """Crear el directorio del servidor"""
        try:
            self.server_dir.mkdir(parents=True, exist_ok=True)
            console.print(f"‚úÖ Directorio creado: {self.server_dir}", style="green")
            return True
        except Exception as e:
            console.print(f"‚ùå Error creando directorio: {e}", style="red")
            return False
    
    def get_minecraft_versions(self):
        """Obtener versiones de Minecraft desde la API oficial"""
        try:
            console.print("üîç Consultando API de Mojang...", style="yellow")
            response = requests.get("https://launchermeta.mojang.com/mc/game/version_manifest.json")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            console.print(f"‚ùå Error consultando API: {e}", style="red")
            return None
    
    def get_paper_versions(self):
        """Obtener versiones de PaperMC"""
        try:
            console.print("üîç Consultando API de PaperMC...", style="yellow")
            response = requests.get("https://api.papermc.io/v2/projects/paper")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            console.print(f"‚ùå Error consultando API de PaperMC: {e}", style="red")
            return None
    
    def download_server_jar(self, download_url, filename="server.jar"):
        """Descargar el archivo JAR del servidor"""
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=console
            ) as progress:
                task = progress.add_task("Descargando servidor...", total=None)
                
                response = requests.get(download_url, stream=True)
                response.raise_for_status()
                
                total_size = int(response.headers.get('content-length', 0))
                progress.update(task, total=total_size)
                
                with open(self.server_jar, 'wb') as f:
                    downloaded = 0
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            progress.update(task, completed=downloaded)
                
                progress.update(task, description="‚úÖ Descarga completada")
            
            console.print(f"‚úÖ Servidor descargado: {self.server_jar}", style="green")
            return True
        except Exception as e:
            console.print(f"‚ùå Error descargando servidor: {e}", style="red")
            return False
    
    def install_vanilla_latest(self, versions_data):
        """Instalar la √∫ltima versi√≥n estable de Vanilla"""
        try:
            latest_release = versions_data['latest']['release']
            console.print(f"üì¶ Instalando Minecraft Vanilla {latest_release}")
            
            # Buscar la versi√≥n en la lista
            version_info = None
            for version in versions_data['versions']:
                if version['id'] == latest_release:
                    version_info = version
                    break
            
            if not version_info:
                console.print("‚ùå No se encontr√≥ informaci√≥n de la versi√≥n", style="red")
                return False
            
            # Obtener informaci√≥n del servidor
            version_response = requests.get(version_info['url'])
            version_response.raise_for_status()
            version_data = version_response.json()
            
            server_url = version_data['downloads']['server']['url']
            return self.download_server_jar(server_url)
            
        except Exception as e:
            console.print(f"‚ùå Error instalando Vanilla: {e}", style="red")
            return False
    
    def install_vanilla_specific(self, versions_data, version_id):
        """Instalar una versi√≥n espec√≠fica de Vanilla"""
        try:
            console.print(f"üì¶ Instalando Minecraft Vanilla {version_id}")
            
            # Buscar la versi√≥n espec√≠fica
            version_info = None
            for version in versions_data['versions']:
                if version['id'] == version_id:
                    version_info = version
                    break
            
            if not version_info:
                console.print(f"‚ùå Versi√≥n {version_id} no encontrada", style="red")
                return False
            
            # Obtener informaci√≥n del servidor
            version_response = requests.get(version_info['url'])
            version_response.raise_for_status()
            version_data = version_response.json()
            
            if 'server' not in version_data['downloads']:
                console.print(f"‚ùå La versi√≥n {version_id} no tiene servidor disponible", style="red")
                return False
            
            server_url = version_data['downloads']['server']['url']
            return self.download_server_jar(server_url)
            
        except Exception as e:
            console.print(f"‚ùå Error instalando versi√≥n espec√≠fica: {e}", style="red")
            return False
    
    def install_paper_latest(self):
        """Instalar la √∫ltima versi√≥n de PaperMC"""
        try:
            paper_data = self.get_paper_versions()
            if not paper_data:
                return False
            
            # Obtener la √∫ltima versi√≥n
            latest_version = paper_data['versions'][-1]
            console.print(f"üì¶ Instalando PaperMC {latest_version}")
            
            # Obtener builds disponibles
            builds_response = requests.get(f"https://api.papermc.io/v2/projects/paper/versions/{latest_version}")
            builds_response.raise_for_status()
            builds_data = builds_response.json()
            
            # Obtener el √∫ltimo build
            latest_build = builds_data['builds'][-1]
            
            # Descargar el JAR
            download_url = f"https://api.papermc.io/v2/projects/paper/versions/{latest_version}/builds/{latest_build}/downloads/paper-{latest_version}-{latest_build}.jar"
            
            return self.download_server_jar(download_url)
            
        except Exception as e:
            console.print(f"‚ùå Error instalando PaperMC: {e}", style="red")
            return False
    
    def setup_eula(self):
        """Configurar el EULA autom√°ticamente"""
        eula_path = self.server_dir / "eula.txt"
        try:
            with open(eula_path, 'w') as f:
                f.write("# EULA aceptado autom√°ticamente por el instalador\n")
                f.write("eula=true\n")
            console.print("‚úÖ EULA configurado autom√°ticamente", style="green")
            return True
        except Exception as e:
            console.print(f"‚ùå Error configurando EULA: {e}", style="red")
            return False
    
    def first_run_server(self):
        """Ejecutar el servidor por primera vez para generar archivos"""
        try:
            console.print("üöÄ Ejecutando servidor por primera vez...", style="yellow")
            os.chdir(self.server_dir)
            
            # Ejecutar el servidor por un corto per√≠odo
            process = subprocess.Popen(
                self.java_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                cwd=self.server_dir
            )
            
            # Esperar un poco para que genere archivos
            time.sleep(10)
            
            # Terminar el proceso
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
            
            console.print("‚úÖ Archivos de configuraci√≥n generados", style="green")
            return True
            
        except Exception as e:
            console.print(f"‚ùå Error en primera ejecuci√≥n: {e}", style="red")
            return False
    
    def test_server(self):
        """Probar que el servidor funcione correctamente"""
        try:
            console.print("üß™ Probando el servidor...", style="yellow")
            os.chdir(self.server_dir)
            
            process = subprocess.Popen(
                self.java_args,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                cwd=self.server_dir
            )
            
            # Esperar y leer salida
            start_time = time.time()
            server_started = False
            
            while time.time() - start_time < 30:  # Timeout de 30 segundos
                line = process.stdout.readline()
                if line:
                    console.print(f"[dim]SERVER: {line.strip()}[/dim]")
                    if "Done" in line and "For help" in line:
                        server_started = True
                        break
                
                if process.poll() is not None:
                    break
            
            # Enviar comando de parada
            if server_started:
                process.stdin.write("stop\n")
                process.stdin.flush()
            
            process.terminate()
            try:
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                process.kill()
            
            if server_started:
                console.print("‚úÖ Servidor funciona correctamente", style="green")
                return True
            else:
                console.print("‚ùå El servidor no se inici√≥ correctamente", style="red")
                return False
                
        except Exception as e:
            console.print(f"‚ùå Error probando servidor: {e}", style="red")
            return False
    
    def show_installation_menu(self):
        """Mostrar men√∫ de instalaci√≥n"""
        console.clear()
        
        panel = Panel.fit(
            "[bold blue]üéÆ INSTALADOR DE SERVIDOR MINECRAFT[/bold blue]\n"
            "[dim]Compatible con Windows 10/11 - AMD Ryzen 7 5700[/dim]",
            border_style="blue"
        )
        console.print(panel)
        
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Opci√≥n", style="cyan", width=8)
        table.add_column("Descripci√≥n", style="white")
        
        table.add_row("1", "üç¶ Instalar la √∫ltima versi√≥n estable de Minecraft Vanilla")
        table.add_row("2", "üéØ Especificar una versi√≥n manualmente")
        table.add_row("3", "üìÑ Instalar la √∫ltima versi√≥n de PaperMC (compatible con plugins)")
        table.add_row("0", "‚ùå Salir")
        
        console.print(table)
        
        choice = Prompt.ask(
            "\n[bold yellow]Selecciona una opci√≥n[/bold yellow]",
            choices=["0", "1", "2", "3"],
            default="1"
        )
        
        return choice
    
    def run_installation(self):
        """Ejecutar el proceso de instalaci√≥n completo"""
        console.print("[bold green]üöÄ INICIANDO INSTALACI√ìN DEL SERVIDOR MINECRAFT[/bold green]")
        
        # Crear directorio
        if not self.create_server_directory():
            return False
        
        # Mostrar men√∫ y obtener elecci√≥n
        choice = self.show_installation_menu()
        
        if choice == "0":
            console.print("üëã Instalaci√≥n cancelada", style="yellow")
            return False
        
        # Obtener datos de versiones
        versions_data = self.get_minecraft_versions()
        if not versions_data:
            console.print("‚ùå No se pudo obtener informaci√≥n de versiones", style="red")
            return False
        
        # Instalar seg√∫n la opci√≥n elegida
        success = False
        
        if choice == "1":
            success = self.install_vanilla_latest(versions_data)
        elif choice == "2":
            version_id = Prompt.ask("üí≠ Introduce la versi√≥n espec√≠fica (ej. 1.16.5)")
            success = self.install_vanilla_specific(versions_data, version_id)
        elif choice == "3":
            success = self.install_paper_latest()
        
        if not success:
            return False
        
        # Configurar EULA
        if not self.setup_eula():
            return False
        
        # Primera ejecuci√≥n
        if not self.first_run_server():
            return False
        
        # Configurar EULA nuevamente (por si se regener√≥)
        self.setup_eula()
        
        # Probar servidor
        if not self.test_server():
            console.print("‚ö†Ô∏è El servidor se instal√≥ pero hay problemas en la ejecuci√≥n", style="yellow")
        
        console.print("\nüéâ [bold green]INSTALACI√ìN COMPLETADA EXITOSAMENTE[/bold green]")
        console.print(f"üìÅ Directorio del servidor: {self.server_dir}")
        console.print("üìã Pr√≥ximo paso: Configurar ZeroTier y ejecutar el panel de administraci√≥n")
        
        return True

def main():
    """Funci√≥n principal"""
    try:
        installer = MinecraftServerInstaller()
        if installer.run_installation():
            console.print("\n‚ú® ¬°Listo para usar el panel de administraci√≥n!", style="bold green")
        else:
            console.print("\nüí• La instalaci√≥n fall√≥", style="bold red")
            sys.exit(1)
    except KeyboardInterrupt:
        console.print("\n\nüëã Instalaci√≥n interrumpida por el usuario", style="yellow")
        sys.exit(0)
    except Exception as e:
        console.print(f"\nüí• Error inesperado: {e}", style="bold red")
        sys.exit(1)

if __name__ == "__main__":
    main()
